        -:    0:Source:TicTacToeBoard.cpp
        -:    0:Graph:TicTacToeBoard.gcno
        -:    0:Data:TicTacToeBoard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "TicTacToeBoard.h"
        -:    2:/**
        -:    3: * Class for representing a 3x3 Tic-Tac-Toe game board, using the Piece enum
        -:    4: * to represent the spaces on the board.
        -:    5:**/
        -:    6:
        -:    7://Constructor sets an empty board and specifies it is X's turn first
function _ZN14TicTacToeBoardC2Ev called 35 returned 100% blocks executed 100%
       35:    8:TicTacToeBoard::TicTacToeBoard()
        -:    9:{
       35:   10:  turn = X;
      140:   11:  for(int i=0; i<BOARDSIZE; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      420:   12:    for(int j=0; j<BOARDSIZE; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      315:   13:      board[i][j] = Blank;
       35:   14:}
        -:   15:
        -:   16:/**
        -:   17: * Switches turn member variable to represent whether it's X's or O's turn
        -:   18: * and returns whose turn it is
        -:   19:**/
function _ZN14TicTacToeBoard10toggleTurnEv called 131 returned 100% blocks executed 100%
      131:   20:Piece TicTacToeBoard::toggleTurn()
        -:   21:{
      131:   22:  if(turn == X){
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
       69:   23:    turn = O;
        -:   24:  } else{
       62:   25:    turn = X;
        -:   26:  }
      131:   27:  return turn;
        -:   28:}
        -:   29:
        -:   30:/**
        -:   31: * Places the piece of the current turn on the board, returns what
        -:   32: * piece is placed, and toggles which Piece's turn it is. placePiece does 
        -:   33: * NOT allow to place a piece in a location where there is already a piece.
        -:   34: * In that case, placePiece just returns what is already at that location. 
        -:   35: * Out of bounds coordinates return the Piece Invalid value. When the game
        -:   36: * is over, no more pieces can be placed so attempting to place a piece
        -:   37: * should neither change the board nor change whose turn it is.
        -:   38:**/ 
function _ZN14TicTacToeBoard10placePieceEii called 136 returned 100% blocks executed 100%
      136:   39:Piece TicTacToeBoard::placePiece(int row, int column){
      136:   40:  Piece temp = getPiece(row,column);
call    0 returned 100%
      136:   41:  if(temp == Invalid){
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        8:   42:    return Invalid;
        -:   43:  }
      128:   44:  else if(temp == X || temp == O){
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        2:   45:    return temp;
        -:   46:  }
        -:   47:  else{
      126:   48:    board[row][column] = turn;
      126:   49:    temp = turn;
      126:   50:    turn = toggleTurn();
call    0 returned 100%
      126:   51:    return temp;
        -:   52:  }
        -:   53:}
        -:   54:
        -:   55:/**
        -:   56: * Returns what piece is at the provided coordinates, or Blank if there
        -:   57: * are no pieces there, or Invalid if the coordinates are out of bounds
        -:   58:**/
function _ZN14TicTacToeBoard8getPieceEii called 139 returned 100% blocks executed 100%
      139:   59:Piece TicTacToeBoard::getPiece(int row, int column){
      139:   60:  if(row > BOARDSIZE - 1 || row < 0 || column > BOARDSIZE - 1 || column < 0){               //checks valid input
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 1% (fallthrough)
branch  7 taken 99%
        8:   61:    return Invalid;
        -:   62:  }
        -:   63:  else{
      131:   64:    return board[row][column];
        -:   65:  }
        -:   66:}
        -:   67:
        -:   68:/**
        -:   69: * Returns which Piece has won, if there is a winner, Invalid if the game
        -:   70: * is not over, or Blank if the board is filled and no one has won.
        -:   71:**/
function _ZN14TicTacToeBoard9getWinnerEv called 16 returned 100% blocks executed 98%
       16:   72:Piece TicTacToeBoard::getWinner(){
        -:   73:  Piece to_return;
        -:   74:  bool winner;
        -:   75:
        -:   76:  // checks rows
       52:   77:  for(unsigned int i = 0; i < BOARDSIZE; i++) {
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
       42:   78:    winner = true;
       42:   79:    to_return = board[i][0];
       60:   80:    for(unsigned int j = 1; j < BOARDSIZE; j++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       54:   81:      if(board[i][j] != to_return || board[i][j] == Blank){
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
       36:   82:        winner = false;
       36:   83:        break;
        -:   84:      }
        -:   85:    }
       42:   86:    if (winner){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        6:   87:      return to_return;
        -:   88:    }
        -:   89:  }
        -:   90:  
        -:   91:  // checks columns
       28:   92:   for(unsigned int i = 0; i < BOARDSIZE; i++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
       24:   93:     winner = true;
       24:   94:     to_return = board[0][i];
       40:   95:    for(unsigned int j = 1; j < BOARDSIZE; j++){
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
       34:   96:      if(board[j][i] != to_return || board[j][i] == Blank){
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
       18:   97:        winner = false;
       18:   98:        break;
        -:   99:      }
        -:  100:    }
       24:  101:    if (winner){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        6:  102:      return to_return;
        -:  103:    }
        -:  104:  }
        -:  105:  
        -:  106:  // checks diagonals
        4:  107:  to_return = board[0][0];
        4:  108:  winner = true;
       10:  109:  for(unsigned int i = 0; i < BOARDSIZE - 1; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8:  110:    if(board[i][i] != to_return || board[i][i] == Blank){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        2:  111:      winner = false;
        2:  112:      break;
        -:  113:    }
        -:  114:  }
        4:  115:  if(winner){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  116:    return to_return;
        -:  117:  }
        -:  118:  
        -:  119:  
        2:  120:  to_return = board[BOARDSIZE - 1][0];
        2:  121:  winner = true;
        4:  122:  for(int i = BOARDSIZE - 2; i >= 0; i--){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        4:  123:    if(board[i][i] != to_return || board[i][i] == Blank){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        2:  124:      winner = false;
        2:  125:      break;
        -:  126:    }
        -:  127:  }
        2:  128:  if(winner){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  129:    return to_return;
        -:  130:  }
        -:  131:  
        -:  132:  
        2:  133:  return to_return;
        -:  134:}
